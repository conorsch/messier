#!/usr/bin/env python
"""Messier.

Usage:
  messier.py <command> [options] [<vms> ...]

Examples:
  messier.py create server
  messier.py converge
  messier.py verify
  messier.py test
  messier.py list
  messier.py (-h | --help)
  messier.py --version

Options:
  -h --help                Show this screen.
  --provider PROVIDER      Backend provider [default: virtualbox].
  --wait <seconds>         Time to sleep after destroying [default: 10].
  --pristine               Destroy VMs prior to run.
  --reboot                 Reboot hosts prior to running Serverspec tests.
  --destroy <strategy>     Destroy hosts <passing|always|never> after running test suite [default: passing].
  --playbook <playbook>    Path to Ansible playbook for testing [default: test/default.yml].
  --config                 Path to Messier YAML config file [default: .messier].
  --keep                   Preserve existing VMs for test run.

"""
from docopt import docopt

# command line options: test, provision, destroy, etc
# in general, Vagrant commands should be honored. Depend on Vagrant
# to manage provisioning regardless of backend. Greatly simplifies scope
# of `messier`.

import messier



if __name__ == "__main__":
    args = docopt(__doc__, version='0.1')
    print(args)
    m = messier.Messier(args)
    m.args['vms'] = m.available_vms()

    if args['<command>'] == 'create':
        m.create_vms()

    elif args['<command>'] == 'destroy':
        m.destroy_vms()

    elif args['<command>'] == 'verify':
        m.verify_vms()

    elif args['<command>'] == 'test':
        if not args['--keep']:
            m.destroy_vms()
        m.create_vms()
        m.provision_vms()
        if args['--reboot']:
            m.reload_vms()
        m.verify_vms()
        if args['--destroy'] == "passing" \
                and not args['--keep']:
            m.destroy_vms()

